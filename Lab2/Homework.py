# -*- coding: utf-8 -*-
"""Lista 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pLUYVroKOxrp15tQzSWRj_jc2fwocKVo

# Import bibliotek
"""

import os
import pandas as pd

!pip install tensorflow

"""# Przygotowanie danych do analizy"""

os.getcwd()

from google.colab import drive
drive.mount("/content/drive")

os.chdir("/content/drive/MyDrive/Colab Notebooks/datasets/")

df = pd.read_csv("DSP_4.csv", sep=";")
df

"""# Zadanie 1"""

pd.set_option('display.max_rows', 10)
pd.set_option('display.max_columns', 5)
pd.set_option('display.max_rows', 1000)
pd.set_option('display.max_colwidth', None)
pd.set_option('display.precision', 3)

display(df)

"""# Zadanie 2"""

df_3 = df.fillna(df.median())
display(df_3)
print("Mediana wiek:", df_3['wiek'].median())
print("Mediana wzrost:", df_3['wzrost'].median())

df_4 = df.fillna(0)
display(df_4)

"""# Zadanie 3"""

dsp5 = pd.read_csv("DSP_5.csv", sep=";")
pd.set_option('display.max_rows', 32)
pd.set_option('display.max_columns', 12)
pd.set_option('display.max_rows', 1000)
pd.set_option('display.max_colwidth', None)
pd.set_option('display.precision', 3)
display(dsp5)

dsp5.isnull().any()

dsp5_2 = dsp5.fillna(dsp5.select_dtypes(include='number').mean())
display(dsp5_2)

hp_mean = dsp5['hp'].mean()
hp_variance = dsp5['hp'].var()
hp_range = dsp5['hp'].max() - dsp5['hp'].min()

print("Średnia hp:", hp_mean)
print("Wariancja hp:", hp_variance)
print("Rozstęp hp:", hp_range)

import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

numeric_columns = dsp5.select_dtypes(include='number')
corr_table = numeric_columns.corr()

plt.figure(figsize=(10,5))
heatmap = sns.heatmap(corr_table, vmin=-1, vmax=1, annot=True)
heatmap.set_title("Analiza korelacji", fontdict={"fontsize": 14}, pad=12)

"""# Zadanie 4"""

dsp8 = pd.read_csv("DSP_8.csv", sep=",")
display(dsp8)

print("a)")
print("Liczba kolumn:", len(dsp8.columns))
print(dsp8.columns.tolist())

print("b)")
print("Liczba wierszy (obserwacji):", len(dsp8))

print("c)")
print("Ewentualne braki danych:")
print(dsp8.isnull().sum())

print("d)")
mean_age_female = dsp8[dsp8['Sex'] == "F"]['Age'].mean()
std_age_female = dsp8[dsp8['Sex'] == "F"]['Age'].std()

mean_age_male = dsp8[dsp8['Sex'] == "M"]['Age'].mean()
std_age_male = dsp8[dsp8['Sex'] == "M"]['Age'].std()

print("Średni wiek i odchylenie standardowe:")
print("Kobiety:")
print("Średni wiek:", mean_age_female)
print("Odchylenie standardowe:", std_age_female)

print("Mężczyźni:")
print("Średni wiek:", mean_age_male)
print("Odchylenie standardowe:", std_age_male)

print("e)")
percentage_male = (len(dsp8[dsp8['Sex'] == "M"]) / len(dsp8)) * 100
print("Odsetek mężczyzn w zbiorze danych:", percentage_male, "%")

print("f)")
female_age_45_50 = dsp8[(dsp8['Sex'] == "F") & (dsp8['Age'] >= 45) & (dsp8['Age'] <= 50)]
count_female_age_45_50 = len(female_age_45_50)
print("Liczba kobiet w wieku od 45 do 50 lat:", count_female_age_45_50)

print("g)")
numeric_columns = dsp8.select_dtypes(include='number')
corr_table = numeric_columns[dsp8['RestingECG'] == 'Normal'].corr()

plt.figure(figsize=(10,5))
heatmap = sns.heatmap(corr_table, vmin=-1, vmax=1, annot=True)
heatmap.set_title("Korelacja między zmiennymi dla osób z EKG w czasie spoczynku w normie:", fontdict={"fontsize": 14}, pad=12)